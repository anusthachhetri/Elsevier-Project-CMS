namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"


##  RELAX NG Schema for HTML 5: Web Forms 2.0 markup

## Shared attributes for form controls
common-form.attrs &= common-form.attrs.form?
common-form.attrs.form |= attribute form { string }
shared-form.attrs.formaction = attribute formaction { common.data.uri }
shared-form.attrs.formenctype = attribute formenctype { shared-form.attrs.formenctype.data }
shared-form.attrs.formenctype.data =
  xsd:string "application/x-www-form-urlencoded"
  | xsd:string "multipart/form-data"
  | xsd:string "text/plain"
shared-form.attrs.formmethod = attribute formmethod { shared-form.attrs.formmethod.data }
shared-form.attrs.formmethod.data = xsd:string "get" | xsd:string "post"
shared-form.attrs.formtarget =
  attribute formtarget {
    xsd:string {
      pattern =
        "()|([^_].*)|(_[bB][lL][aA][nN][kK])|(_[sS][eE][lL][fF])|(_[pP][aA][rR][eE][nN][tT])|(_[tT][oO][pP])"
    }
  }
shared-form.attrs.formnovalidate = attribute formnovalidate { string "formnovalidate" | string "" }
shared-form.attrs.autofocus = attribute autofocus { string "autofocus" | string "" }
shared-form.attrs.pattern = attribute pattern { form.data.pattern }
shared-form.attrs.template = attribute template { string }
shared-form.attrs.required = attribute required { string "required" | string "" }
shared-form.attrs.placeholder = attribute placeholder { form.data.stringwithoutlinebreaks }
shared-form.attrs.dirname = attribute dirname { form.data.nonemptystring }
shared-form.attrs.inputmode = attribute inputmode { string }
shared-form.attrs.minlength =
  attribute minlength {
    # common.data.integer.non-negative
    xsd:string { pattern = "[0-9]+" }
  }

## Shared attributes for <input>
shared-input.attrs =
  input.attrs.autocomplete?
  & shared-form.attrs.autofocus?
  & input.attrs.list?
  & shared-form.attrs.maxlength?
  & shared-form.attrs.minlength?
  & shared-form.attrs.pattern?
  & shared-form.attrs.placeholder?
  & shared-form.attrs.readonly?
  & shared-form.attrs.required?
  & shared-form.attrs.size?
input.attrs.list = attribute list { string }
input.attrs.step.float =
  attribute step {
    string "any"
    | # common.data.float.positive
      xsd:string {
        pattern = "(0*[1-9][0-9]*(\.[0-9]+)?)|([0-9]+(\.0*[1-9][0-9]*)?)([eE]-?[0-9]+)?"
      }
  }
input.attrs.step.integer =
  attribute step {
    # common.data.integer.positive
    string "any"
    | xsd:string { pattern = "0*[1-9][0-9]*" }
  }
input.attrs.multiple = attribute multiple { string "multiple" | string "" }

## autocomplete
input.attrs.autocomplete.any = attribute autocomplete { string "on" | string "off" }
input.attrs.autocomplete = attribute autocomplete { string }

## Hidden String: <input type='hidden'>, Extensions
input.hidden.attrs &= input.attrs.autocomplete?

## Text Field: <input type='text'>, Extensions
input.text.attrs &=
  input.attrs.autocomplete?
  & shared-form.attrs.autofocus?
  & shared-form.attrs.dirname?
  & input.attrs.list?
  & shared-form.attrs.pattern?
  & shared-form.attrs.required?
  & shared-form.attrs.placeholder?
  & shared-form.attrs.inputmode?
  & shared-form.attrs.minlength?

## Password Field: <input type='password'>, Extensions
input.password.attrs &=
  input.attrs.autocomplete?
  & shared-form.attrs.autofocus?
  & input.attrs.list?
  & shared-form.attrs.pattern?
  & shared-form.attrs.placeholder?
  & shared-form.attrs.required?
  & aria.prop.required?
  & shared-form.attrs.minlength?

## Checkbox <input type='checkbox'>, Extensions
input.checkbox.attrs &= shared-input.attrs & aria.prop.required?

## Radiobutton: <input type='radio'>, Extensions
input.radio.attrs &= shared-input.attrs & aria.prop.required?

## Scripting Hook Button: <input type='button'>, Extensions
input.button.attrs &= shared-input.attrs

## Submit Button: <input type='submit'>, Extensions
input.submit.attrs &=
  shared-input.attrs
  & shared-form.attrs.formaction?
  & shared-form.attrs.formenctype?
  & shared-form.attrs.formmethod?
  & shared-form.attrs.formtarget?
  & shared-form.attrs.formnovalidate?

## Reset Button: <input type='reset'>, Extensions
input.reset.attrs &= shared-input.attrs

## File Upload: <input type='file'>, Extensions
input.file.attrs &= shared-input.attrs & input.attrs.multiple?

## Image Submit Button: <input type='image'>, Extensions
input.image.attrs &=
  shared-input.attrs
  & shared-form.attrs.formaction?
  & shared-form.attrs.formenctype?
  & shared-form.attrs.formmethod?
  & shared-form.attrs.formtarget?
  & shared-form.attrs.formnovalidate?
  & input.image.attrs.height?
  & input.image.attrs.width?
input.image.attrs.height =
  attribute height {
    # common.data.integer.non-negative
    xsd:string { pattern = "[0-9]+" }
  }
input.image.attrs.width =
  attribute width {
    # common.data.integer.non-negative
    xsd:string { pattern = "[0-9]+" }
  }

## Date and Time with No Time Zone Information: <input type='datetime-local'>
input.datetime-local.elem = element input { input.datetime-local.attrs }
input.datetime-local.attrs =
  common.attrs
  & common-form.attrs
  & shared-input.attrs
  & input.datetime-local.attrs.type
  & input.datetime-local.attrs.min?
  & input.datetime-local.attrs.max?
  & input.attrs.step.float?
  & input.datetime-local.attrs.value?
  & (common.attrs.aria? | aria.prop.required?)
input.datetime-local.attrs.type = attribute type { string "datetime-local" }
input.datetime-local.attrs.min = attribute min { form.data.datetime-local }
input.datetime-local.attrs.max = attribute max { form.data.datetime-local }
input.datetime-local.attrs.value = attribute value { string "" | form.data.datetime-local }
input.elem |= input.datetime-local.elem

## Date: <input type='date'>
input.date.elem = element input { input.date.attrs }
input.date.attrs =
  common.attrs
  & common-form.attrs
  & shared-input.attrs
  & input.date.attrs.type
  & input.date.attrs.min?
  & input.date.attrs.max?
  & input.attrs.step.integer?
  & input.date.attrs.value?
  & (common.attrs.aria? | aria.prop.required?)
input.date.attrs.type = attribute type { string "date" }
input.date.attrs.min = attribute min { form.data.date }
input.date.attrs.max = attribute max { form.data.date }
input.date.attrs.value = attribute value { string "" | form.data.date }
input.elem |= input.date.elem

## Year and Month: <input type='month'>
input.month.elem = element input { input.month.attrs }
input.month.attrs =
  common.attrs
  & common-form.attrs
  & shared-input.attrs
  & input.month.attrs.type
  & input.month.attrs.min?
  & input.month.attrs.max?
  & input.attrs.step.integer?
  & input.month.attrs.value?
  & (common.attrs.aria? | aria.prop.required?)
input.month.attrs.type = attribute type { string "month" }
input.month.attrs.min = attribute min { form.data.month }
input.month.attrs.max = attribute max { form.data.month }
input.month.attrs.value = attribute value { string "" | form.data.month }
input.elem |= input.month.elem

## Time without Time Zone Information: <input type='time'>
input.time.elem = element input { input.time.attrs }
input.time.attrs =
  common.attrs
  & common-form.attrs
  & shared-input.attrs
  & input.time.attrs.type
  & input.time.attrs.min?
  & input.time.attrs.max?
  & input.attrs.step.float?
  & input.time.attrs.value?
  & (common.attrs.aria? | aria.prop.required?)
input.time.attrs.type = attribute type { string "time" }
input.time.attrs.min = attribute min { form.data.time }
input.time.attrs.max = attribute max { form.data.time }
input.time.attrs.value = attribute value { string "" | form.data.time }
input.elem |= input.time.elem

## Year and Week: <input type='week'>
input.week.elem = element input { input.week.attrs }
input.week.attrs =
  common.attrs
  & common-form.attrs
  & shared-input.attrs
  & input.week.attrs.type
  & input.week.attrs.min?
  & input.week.attrs.max?
  & input.attrs.step.integer?
  & input.week.attrs.value?
  & (common.attrs.aria? | aria.prop.required?)
input.week.attrs.type = attribute type { string "week" }
input.week.attrs.min = attribute min { form.data.week }
input.week.attrs.max = attribute max { form.data.week }
input.week.attrs.value = attribute value { string "" | form.data.week }
input.elem |= input.week.elem

## Number: <input type='number'>
input.number.elem = element input { input.number.attrs }
input.number.attrs =
  common.attrs
  & common-form.attrs
  & shared-input.attrs
  & input.number.attrs.type
  & input.number.attrs.min?
  & input.number.attrs.max?
  & input.attrs.step.float?
  & input.number.attrs.value?
  & (common.attrs.aria.implicit.spinbutton | common.attrs.aria.role.spinbutton)?
input.number.attrs.type = attribute type { string "number" }
input.number.attrs.min =
  attribute min {
    # common.data.float
    xsd:string { pattern = "-?[0-9]+(\.[0-9]+)?([eE]-?[0-9]+)?" }
  }
input.number.attrs.max =
  attribute max {
    # common.data.float
    xsd:string { pattern = "-?[0-9]+(\.[0-9]+)?([eE]-?[0-9]+)?" }
  }
input.number.attrs.value =
  attribute value {
    # common.data.float
    string ""
    | xsd:string { pattern = "-?[0-9]+(\.[0-9]+)?([eE]-?[0-9]+)?" }
  }
input.elem |= input.number.elem

## Imprecise Number: <input type='range'>
input.range.elem = element input { input.range.attrs }
input.range.attrs =
  common.attrs
  & common-form.attrs
  & shared-input.attrs
  & input.range.attrs.type
  & input.range.attrs.min?
  & input.range.attrs.max?
  & input.attrs.step.float?
  & input.range.attrs.value?
  & (common.attrs.aria.implicit.slider | common.attrs.aria.role.slider)?
input.range.attrs.type = attribute type { string "range" }
input.range.attrs.min =
  attribute min {
    # common.data.float
    xsd:string { pattern = "-?[0-9]+(\.[0-9]+)?([eE]-?[0-9]+)?" }
  }
input.range.attrs.max =
  attribute max {
    # common.data.float
    xsd:string { pattern = "-?[0-9]+(\.[0-9]+)?([eE]-?[0-9]+)?" }
  }
input.range.attrs.value =
  attribute value {
    # common.data.float
    xsd:string { pattern = "-?[0-9]+(\.[0-9]+)?([eE]-?[0-9]+)?" }
  }
input.elem |= input.range.elem

## Email Address: <input type='email'>
input.email.elem = element input { input.email.attrs }
input.email.attrs =
  common.attrs
  & common-form.attrs
  & shared-input.attrs
  & input.email.attrs.type
  & ((input.attrs.multiple & input.email.attrs.value.multiple?) | input.email.attrs.value.single?)?
  & (common.attrs.aria.implicit.textbox
     | common.attrs.aria.implicit.combobox
     | common.attrs.aria.role.textbox
     | common.attrs.aria.role.combobox)?
input.email.attrs.type = attribute type { string "email" }
input.email.attrs.value.single = attribute value { form.data.emailaddress }
input.email.attrs.value.multiple = attribute value { form.data.emailaddresslist }
input.elem |= input.email.elem

## IRI: <input type='url'>
input.url.elem = element input { input.url.attrs }
input.url.attrs =
  common.attrs
  & common-form.attrs
  & shared-input.attrs
  & input.url.attrs.type
  & input.url.attrs.value?
  & (common.attrs.aria.implicit.textbox
     | common.attrs.aria.implicit.combobox
     | common.attrs.aria.role.textbox
     | common.attrs.aria.role.combobox)?
input.url.attrs.type = attribute type { string "url" }
input.url.attrs.value =
  attribute value {
    string ""
    | # common.data.uri.absolute
      common.data.uri
  }
input.elem |= input.url.elem

## Search: <input type='search'>
input.search.elem = element input { input.search.attrs }
input.search.attrs =
  common.attrs
  & common-form.attrs
  & shared-input.attrs
  & input.search.attrs.type
  & input.search.attrs.value?
  & shared-form.attrs.dirname?
  & (common.attrs.aria.implicit.searchbox | common.attrs.aria.role.searchbox)?
input.search.attrs.type = attribute type { string "search" }
input.search.attrs.value = attribute value { form.data.stringwithoutlinebreaks }
input.elem |= input.search.elem

## Telephone Number: <input type='tel'>
input.tel.elem = element input { input.tel.attrs }
input.tel.attrs =
  common.attrs
  & common-form.attrs
  & shared-input.attrs
  & input.tel.attrs.type
  & input.tel.attrs.value?
  & (common.attrs.aria.implicit.textbox
     | common.attrs.aria.implicit.combobox
     | common.attrs.aria.role.textbox
     | common.attrs.aria.role.combobox)?
input.tel.attrs.type = attribute type { string "tel" }
input.tel.attrs.value = attribute value { form.data.stringwithoutlinebreaks }
input.elem |= input.tel.elem

## Color: <input type='color'>
input.color.elem = element input { input.color.attrs }
input.color.attrs =
  common.attrs
  & common-form.attrs
  & input.color.attrs.type
  & input.color.attrs.value?
  & shared-input.attrs
  & common.attrs.aria?
input.color.attrs.type = attribute type { string "color" }
input.color.attrs.value = attribute value { string "" | form.data.color }
input.elem |= input.color.elem

## Form Output: <output>
output.elem = element output { output.inner & output.attrs }
output.attrs =
  common.attrs
  & common-form.attrs.name?
  & common-form.attrs.form?
  & output.attrs.for?
  & (common.attrs.aria.implicit.status | common.attrs.aria)?
output.attrs.for =
  attribute for {
    string
    # REVISIT spec says space- -not whitespace
    
  }
output.inner = common.inner.phrasing

## Text Area: <textarea>, extensions
textarea.attrs.rows-and-cols-wf1.inner &= notAllowed
textarea.attrs.rows-and-cols-wf1 |= empty
textarea.attrs &=
  shared-form.attrs.maxlength?
  & shared-form.attrs.minlength?
  & shared-form.attrs.autofocus?
  & shared-form.attrs.required?
  & textarea.attrs.placeholder?
  & shared-form.attrs.dirname?
  & textarea.attrs.rows?
  & ((textarea.attrs.wrap.hard & textarea.attrs.cols)
     | (textarea.attrs.wrap.soft? & textarea.attrs.cols?))
  & shared-form.attrs.inputmode?
  & input.attrs.autocomplete.any?
textarea.attrs.wrap.hard = attribute wrap { string "hard" }
textarea.attrs.wrap.soft = attribute wrap { string "soft" }
textarea.attrs.placeholder = attribute placeholder { string }
# REVISIT should the options in datalist be non-selectable?

## List of Prefill Data: <datalist>
datalist.elem = element datalist { datalist.inner & datalist.attrs }
datalist.inner = option.elem* & common.inner.phrasing
datalist.attrs =
  common.attrs
  & (common.attrs.aria.role.listbox
     | # aria-multiselectable must be false; check by assertions
       common.attrs.aria.role.presentation
     | common.attrs.aria.role.menuitem)?

## Complex Submit Button: <button type='submit'>, extensions
button.submit.attrs &=
  shared-form.attrs.formaction?
  & shared-form.attrs.autofocus?
  & shared-form.attrs.formenctype?
  & shared-form.attrs.formmethod?
  & shared-form.attrs.formtarget?
  & shared-form.attrs.formnovalidate?

## Complex Reset Button: <button type='reset'>, extensions
button.reset.attrs &= shared-form.attrs.autofocus?

## Complex Push Button: <button type='button'>, extensions
button.button.attrs &= shared-form.attrs.autofocus?

## Form: <form>, extensions
form.attrs &= form.attrs.novalidate? & form.attrs.target? & form.attrs.autocomplete?
form.attrs.novalidate = attribute novalidate { string "novalidate" | string "" }
form.attrs.target =
  attribute target {
    xsd:string {
      pattern =
        "()|([^_].*)|(_[bB][lL][aA][nN][kK])|(_[sS][eE][lL][fF])|(_[pP][aA][rR][eE][nN][tT])|(_[tT][oO][pP])"
    }
  }
form.attrs.autocomplete = attribute autocomplete { string "on" | string "off" }
# REVISIT should this be case-insensitive in conforming XHTML documents?
form.attrs.enctype.data |= string "text/plain"

## Fieldset: <fieldset>, extensions
fieldset.attrs &= common-form.attrs

## Selection Menu: <select>, Extensions
select.attrs &=
  shared-form.attrs.autofocus? & shared-form.attrs.required? & input.attrs.autocomplete.any?
